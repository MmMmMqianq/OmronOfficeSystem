"""
    str.format()方法：执行字符串格式化操作。 调用此方法的字符串可以包含文字文本或用大括号{}分隔的替换字段。
每个替换字段都包含位置参数的数字索引或关键字参数的名称。 返回字符串的副本，其中每个替换字段都用相应参数的
字符串值替换。"Python改变世界，人生苦短我用Python"
    格式字符串包含用花括号{}括起来的“替换字段”。 花括号中不包含的所有内容均视为文字文本，该文本原样复制到输出中。
如果需要在文字文本中包含大括号字符，可以通过加倍{{和}}来转义，参考例1。

format_spec     ::=  [[fill]align][sign][#][0][width][grouping_option][.precision][type]
fill            ::=  <any character>
align           ::=  "<" | ">" | "=" | "^"
sign            ::=  "+" | "-" | " "
width           ::=  digit+
grouping_option ::=  "_" | ","
precision       ::=  digit+
type            ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"
"""

# 例1：如果想要在字符串里面显示花括号{}，可以用{{}}来转义。
print("我要显示一个花括号里面的内容{{{}}}".format("python"))  # 最里面的{}是指要替换的字段，外面的{{ }}是转义{}

# Format examples
# 1. 按位置访问参数
print("1-0. {0}{1}{2}".format("a", "b", "c"))  # 输出："abc"
print("1-1. {}{}{}".format("a", "b", "c"))  # 输出："abc"      只有3.1以上版本才支持这种写法
print("1-2. {2}{0}{1}".format("a", "b", "c"))  # 输出："cab"
print("1-3. {1}{0}{1}".format("a", "b", "c"))  # 输出："bab"

# 2. 按关键字访问参数
info = {"name": "QSQ", "age": 18}
print("2-0. 我的没名字叫{name},我的年龄是{age}".format(age=18, name="QSQ"))  # 输出：我的没名字叫QSQ,我的年龄是18
print("2-1. 我的没名字叫{name},我的年龄是{age}".format(**info))  # info字典必须要解包，否则会报错KeyError:'name'
# info = {0: "QSQ", 1: 18}
# print("2-2. 我的没名字叫{0},我的年龄是{0}".format(**info))  # 用关键字格式化字符时，关键字不能为数字

# 3. 按参数项访问
num = [1, 2, 3, 4]
print("3-0. 显示四个数字为：{0[0]}, {0[1]}, {0[2]}, {0[3]}".format(num))  # 输出：显示四个数字为：1, 2, 3, 4
# print("显示四个数字为：{a[0]}, {a[1]}, {a[2]}, {a[3]}".format(*num))  # 位置参数的索引必须为数字
print("3-1. 显示四个数字为：{0}, {1}, {2}, {3}".format(
    *num))  # 必须要解包，如果不解包的话会报错：# IndexError: Replacement index 1 out of range for positional args tuple

# 4. 文本对齐并且指定宽度，只能填充一个字符
print("4-0. {0:*<10s}".format("abc", "def"))  # 输出：abc*******   0表示位置参数的数字索引，*号表示填充符，<表示左对齐，10表示宽度，s表示字符串
print("4-1. {1:*<10s}".format("abc", "def"))  # 输出：def*******
print("4-2. {0:*>10d}".format(123, 456))  # 输出：*******123   >表示右对齐，d表示整型数据，其他同上
print("4-3. {1:*^10o}".format(0o123, 0o456))  # 输出：***456****   ^表示居中对齐，o表示8进制的数据，替换的数据也要为8进制数据，否则会自动转换为8进制数据再替换，其他同上。
print('4-4. {0:0= 8.2f}'.format(-123))  # 输出：-0123.00     =对齐方式只使用于数字类型，当数字前面带符号时，将在符号和数字之间填充指定的字符

# 5. 浮点数替换和符号指定
print("5-0. {0:+f},{1:.3f}".format(3.1415926123,
                                   -3.1415926))  # 输出：+3.141593,-3.141   默认保留小数点后6位，大于六位四舍五入，小于六位补0，+号表示显示浮点数的正负号
print("5-1. {0:-.1f},{1:-.2f}".format(3.1897, -3.14675))  # 输出：3.1,-3.14    -号表示只显示-号，不显示+号
print("5-2. {0: .1f},{1: .2f}".format(3.14, -3.14))  # 输出： 3.140000,-3.140000   f前面的空格表示，当为正数时前面显示一个 空格3.14，当为负数时显示-3.14

# 6. 八进制、十进制、十六进制替换并将值转换为不同的底数
print("6-0. {0:o},{1:d},{2:x}".format(0o1234, 1234, 0x1234))  # 输出：1234,1234,1234   o表示八进制，d表示整型数据，x表示十六进制数据
print("6-1. {0:o},{1:d},{2:04x}".format(1234, 1234, 1234))  # 输出：2322,1234,04d2    如果替换的数据都是整型的，那么会自动把数据转换为对应的底数
print("6-2. {0:#o},{1:#d},{2:#x}".format(1234, 1234, 1234))  # 输出：0o2322,1234,0x4d2     表示显示对应底数前面的标识符，整型不会显示
print("6-3. {0:#o},{1:#d},{2:#X}".format(1234, 1234, 1234))  # 输出：0o2322,1234,0X4D2     十六进制大写X输出时为大写，八进制o不支持大写
# 7. 用逗号作为千分符
print("7-0. {0:*<+15,d}".format(123456789))  # 输出：+123,456,789***

# 8. 表达百分比
points, total = 20, 22
print("8-0. {0:.2%}".format(points / total))  # 输出：90.91%   四舍五入
print("8-0. {0:%}".format(points / total))  # 输出：90.909091%  默认保留小数点后6位，大于六位四舍五入，小于六位补0

# 9. 格式化时钟
import time

local_time = time.localtime()
print("9-0. {:d}-{:d}-{:d}  {:d}:{:d}:{:d}".format(local_time.tm_year, local_time.tm_mon, local_time.tm_mday,
                                                   local_time.tm_hour, local_time.tm_min, local_time.tm_sec))
# 10. 科学计数法
print("10-0. {0:e}".format(888.1425926))  # 输出：+8.881426e+02   默认精度为6
print("10-0. {0:+.5e}".format(888.1425926))  # 输出：+8.88143e+02   .5表示保留小数点后五位（四舍五入）
print("10-0. {0:+.5E}".format(888.1425926))  # 输出：+8.88143E+02   显示大写E，其他相同

print('11-0. {!r} {!s}'.format("abc", "123"))  # 输出：'abc' 123

